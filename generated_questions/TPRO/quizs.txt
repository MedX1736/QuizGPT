

Question : Quelle est la définition des règles 'res' et 'dim' en programmation logique ?
Réponse : La règle 'res' (résolution) est définie comme suit : E1, E2 |-- E3 ssi : (res) E1 est de la forme a A et E2 est de la forme b B et E3 est de la forme (A , E3 est appelée résolvante de E1 et E2.  est une substitution de renommage de telle sorte que E1 et E2 ne doivent avoir aucune variable commune.  est l'unificateur le plus général entre a et b. La règle 'dim' (diminution) est une simplification faite au niveau d'une seule clause, elle est définie comme suit : E1.


Quelle est la définition d'un atome?

A. Toute constante est un terme
B. Si f est un symbole de fonction n-aires et t1, t2, … tn des termes, alors f(t1, t2, … tn) est un terme
C. Si p est un symbole de prédicat n-aires et t1, t2, … tn des termes, alors p(t1, t2, … tn) est un atome (ou formule atomique)
D. Tout atome est une formule

Réponse : C. Si p est un symbole de prédicat n-aires et t1, t2, … tn des termes, alors p(t1, t2, … tn) est un atome (ou formule atomique), qui est une combinaison de symboles utilisés (constantes, variables, etc.) et des opérateurs logiques (conjonction, disjonction, négation).


Question : Qu'est-ce que la programmation logique ?
Réponse : La programmation logique est un style de programmation non procédurale qui se résume en une déclaration de certaines propriétés du problème à résoudre. La description de ces propriétés se fait à l'aide d'énoncés logiques (formules logiques) composés d'un ensemble de symboles (constantes, variables, etc.) et des opérateurs logiques (conjonction, disjonction, négation). L'exécution d'un programme logique est réalisée à l'aide d'un démonstrateur automatique de théorèmes qui tente de vérifier si à partir d'un ensemble d'énoncés, on peut déduire une formule donnée aussi en entrée (le but ou la question du programme logique). Durant ce processus de démonstration, le moteur d'inférence résoudra le problème décrit


Quelle est la signification de l'opérateur | en Prolog ?

A. Un opérateur particulier qui permet de séparer le début d'une liste du reste de ses éléments (le reste des éléments et toujours une liste). Avec le terme [a,b], [X|Y] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←[b,c] }. [X|Y] ne peut pas s'unifier avec le terme [ ]. [X|Y] peut s'unifier avec le terme [a], l'unificateur est alors { X←a , Y←[ ] }. [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←b , Z←[c] }. Par exemple, l'opérateur | pe


Question : Qu'est-ce qu'un terme ?
Réponse : Un terme est défini par : toute constante est un terme, toute variable est un terme et si f est un symbole de fonction n-aires et t1, t2, … tn des termes, alors f(t1, t2, … tn) est un terme. De plus, un terme peut être défini par l'ensemble des symboles utilisés (constantes, variables, etc.) et les opérateurs logiques (, , ).


Q. Qu'est-ce qu'un terme?

A. Un terme est défini par : toute constante est un terme, toute variable est un terme, et si f est un symbole de fonction n-aires et t1, t2, … tn des termes, alors f(t1, t2, … tn) est un terme. Un terme peut également être défini par l'ensemble des symboles utilisés (constantes, variables, etc.) ainsi que les symboles logiques (, , ).

Question : Quel est le terme structuré représentant la liste [1,2,3] ?
Réponse : lst(1,lst(2,lst(3,nil)))

Quel est le but d'un prédicat en Prolog ?

A. Définir des variables
B. Définir des constantes
C. Définir des relations entre des objets
D. Définir des listes

Réponse C. Définir des relations entre des objets, comme par exemple définir un prédicat 'app(X,L)' qui sera évalué à vrai si X appartient à la liste L et faux sinon.


Question : Qu'est-ce qu'un atome en logique du premier ordre et comment peut-on le prouver ?
Réponse : Un atome est une expression atomique qui ne peut pas être décomposée en expressions plus petites. En logique du premier ordre, un atome est une expression qui ne contient pas de variables et qui est composée d'un symbole de prédicat et d'un nombre fixe de symboles de constantes et de fonctions. Pour prouver un atome, on peut utiliser l'algorithme de résolution qui consiste à explorer en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide. Par exemple, pour prouver la question (le But) : A1  A2, avec comme partie Hypothèses les 4 implications suivantes : f0 : A1 ← B1  B2, f1 : B1 ←, f2 :


Quel est le terme utilisé pour représenter un objet élémentaire en Prolog ?

A. Atome
B. Variable
C. Constante
D. Identificateur

Réponse: A. Atome


Question : Quelle est la méthode utilisée par l'algorithme pour explorer l'espace de recherche des résolvantes ?
Réponse : L'algorithme explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, en utilisant une méthode de recherche récursive jusqu'à trouver la clause vide.


Réponse: Une formule en programmation logique est une expression logique composée de littéraux positifs et négatifs connectés par des opérateurs logiques. Elle peut être utilisée pour définir des prédicats qui seront évalués à vrai ou faux en fonction de leur unification avec des termes. Par exemple, un prédicat 'app(X,L)' peut être défini pour évaluer à vrai si X appartient à la liste L et faux sinon.


Question : Est-ce que la clause 6 (app(X, [X|L])) est une conséquence logique ?
Réponse : Oui, car elle ne contient pas d'antécédents et ne négation. Elle définit un prédicat qui sera évalué à vrai si X appartient à la liste L et faux sinon.


Quelle est la conséquence logique de l'utilisation de Prolog?

A. Prolog permet de trouver des solutions à des problèmes complexes.
B. Prolog permet de trouver des solutions à des problèmes simples.
C. Prolog permet de trouver des solutions à des problèmes logiques.
D. Prolog permet de trouver des solutions à des problèmes mathématiques.

Réponse: C. Prolog permet de trouver des solutions à des problèmes logiques. Prolog est un langage de programmation logique qui permet de résoudre des problèmes logiques en utilisant des techniques d'unification et de recherche.


Question : Quelle est la règle de la résolution ?
Réponse : La règle de la résolution est définie comme suit : E1, E2 |-- E3 ssi : (res) E1 est de la forme a A, E2 est de la forme b B et E3 est de la forme (A , E3 est appelée instance substituée de E1 et E2.  est une substitution de renommage de telle sorte que E1 et E2 ne doivent avoir aucune variable commune.  est l'unificateur le plus général entre a et b. La règle 'dim' (diminution) est une simplification faite au niveau d'une seule clause, elle est définie comme suit : E1.


Réponse: B. La stratégie de résolution descendante


Question : Quelle est la forme générale de l'algorithme de résolution descendante ?
Réponse : L'algorithme de résolution descendante cherche à rendre vide la dénégation D en effaçant tous ses littéraux D. Il explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide. Il est correct mais pas complet, car l'exploration en profondeur risque d'emprunter une branche infinie dans une des itérations de la boucle 'Pour', avant d'explorer d'autres alternatives pouvant mener vers la clause vide.


Quel est le rôle de l'opérateur | en Prolog?

A. Il permet de séparer le début d'une liste du reste de ses éléments, avec le terme [a,b], [X|Y] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←[b,c] }, [X|Y] ne peut pas s'unifier avec le terme [ ], [X|Y] peut s'unifier avec le terme [a], l'unificateur est alors { X←a , Y←[ ] } et [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←b , Z←[c] }.


Question : Qu'est-ce que la substitution de renommage et comment est-elle utilisée dans l'algorithme de résolution ?
Réponse : La substitution de renommage est une technique utilisée pour éviter les variables communes entre deux clauses lors de la résolution. Elle consiste à renommer les variables d'une clause de telle sorte qu'elles ne soient pas identiques à celles de l'autre clause. Cette technique est utilisée dans l'algorithme de résolution pour explorer en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide.


Réponse : { X←a , Y←b , Z←[ ] }

Question : Quel est l'unificateur pour le terme [X,Y|Z] et le terme [a,b,c] ?
Réponse : L'unificateur est { X←a , Y←b , Z←[c] }.


Q. Quel unificateur est obtenu lorsque X s'unifie avec le terme [a,b,c]?

A. { X←a , Y←[b,c] }


Question : Qu'est-ce que l'unification de deux termes et comment est-elle utilisée dans l'algorithme de résolution par dénégation ?
Réponse : L'unification est un processus qui consiste à trouver un unificateur le plus général entre deux termes, c'est-à-dire une substitution de renommage qui permet de rendre les deux termes identiques. L'unification est utilisée dans l'algorithme de résolution par dénégation pour explorer l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide. Par exemple, pour prouver la question (le But) : A1  A2, avec les 4 implications suivantes : f0 : A1 ← B1  B2, f1 : B1 ←, f2 : B2 ← B1  A2, f3 : A2 ←, il suffit de


Réponse: {X←a, Y←b} ou {X←a, Y←[b,c]} ou {X←a, Y←[ ]} ou {X←a, Y←b, Z←[c]}


Question : Quelle est la forme de la dénégation D et comment est-elle utilisée pour prouver une question ?
Réponse : La dénégation D est de la forme D1  D2  … Dn, où D1, D2, ..., Dn sont des littéraux positifs. Elle est utilisée pour prouver une question en réfutant sa négation. Par exemple, pour prouver la question (le But) A1  A2 avec les implications f0 : A1 ← B1  B2, f1 : B1 ←, f2 : B2 ← B1  A2 et f3 : A2 ←, il suffit de réfuter Non(A1  A2), c'est la dénégation initiale. Cet algorithme explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale


Q: Qu'est-ce que le prédicat D(t1, t2) fait?

A: Le prédicat D(t1, t2) permet de définir une relation entre les termes t1 et t2. Il peut être utilisé pour définir des relations entre des objets élémentaires, des listes ou des objets structurés, comme par exemple le prédicat 'app(X,L)' qui sera évalué à vrai si X appartient à la liste L et faux sinon.


Question : Quel algorithme est utilisé pour unifier deux termes et trouver une clause vide ?
Réponse : L'algorithme le plus généralement utilisé pour unifier deux termes et trouver une clause vide est l'unificateur le plus général entre eux. Il explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide. Cependant, il est correct mais pas complet, car l'exploration en profondeur risque d'emprunter une branche infinie dans une des itérations de la boucle 'Pour', avant d'explorer d'autres alternatives pouvant mener vers la clause vide.


Réponse B. X = a, Y = b

Question : Quelle est la complexité de l'algorithme de résolution générale (stratégie par saturation) ?
Réponse : L'algorithme de la résolution générale (stratégie par saturation) a une complexité exponentielle, car il explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide.


Réponse : B. La règle 'dim' est utilisée par l'algorithme de la résolution descendante pour explorer en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide.


Question : Comment l'algorithme explore-t-il l'espace de recherche des résolvantes issues de la dénégation initiale ?
Réponse : L'algorithme explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale en explorant récursivement chaque branche jusqu'à ce qu'il trouve la clause vide. Il est correct mais pas complet, car l'exploration en profondeur risque d'emprunter une branche infinie dans une des itérations de la boucle 'Pour', avant d'explorer d'autres alternatives pouvant mener vers la clause vide. Un exemple simple est donné pour illustrer le processus.


Q : Quelle est la forme générale de la résolvante entre E1 et E2 ?

A : La résolvante entre E1 et E2 est de la forme (A . Cet algorithme explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide. Il est correct mais pas complet, car l'exploration en profondeur risque d'emprunter une branche infinie dans une des itérations de la boucle 'Pour', avant d'explorer d'autres alternatives pouvant mener vers la clause vide.


Question : Quelle est la complexité de l'algorithme par saturation ?
Réponse : L'algorithme par saturation a une complexité exponentielle, car il explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide.


Réponse: B. Exponentielle, car l'exploration en profondeur risque d'emprunter une branche infinie dans une des itérations de la boucle 'Pour', avant d'explorer d'autres alternatives pouvant mener vers la clause vide.


Question : Quelle est la règle du chaînage et comment est-elle appliquée dans le cas de la résolution ?
Réponse : La règle du chaînage est : p ⇒ q , q ⇒ r |-- p ⇒ r. Elle est appliquée dans le cas de la résolution en réfutant la dénégation initiale et en explorant récursivement l'espace de recherche des résolvantes issues de cette dénégation jusqu'à trouver la clause vide.


Réponse : [X,Y,Z] ne peut pas s'unifier avec le terme [a,b], mais [X|Y] peut s'unifier avec le terme [a,b,c], l'unificateur étant { X←a , Y←[b,c] }, et [X|Y] peut s'unifier avec le terme [a], l'unificateur étant { X←a , Y←[ ] }. De plus, [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur étant { X←a , Y←b , Z←[c] }.


Question : Qu'est-ce qu'une clause de Horn et comment peut-on résoudre une clause de Horn ?
Réponse : Une clause de Horn est une clause qui a au plus, un seul littéral positif. Elles sont classées en trois sous-catégories : implication, assertion et dénégation. Pour résoudre une clause de Horn, on peut utiliser l'algorithme de résolution par dénégation qui explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide.


Réponse: B. Résolution descendante. Cette stratégie consiste à explorer en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide.


Question : Quelle est la complexité de l'algorithme de la résolution descendante ?
Réponse : L'algorithme de la résolution descendante est une méthode plus efficace que l'algorithme par saturation pour les clauses de Horn, mais sa complexité reste toujours exponentielle. Cependant, il est correct et peut trouver la clause vide en explorant en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale.


Réponse : B. Il est correct mais pas complet, car l'exploration en profondeur risque d'emprunter une branche infinie dans une des itérations de la boucle 'Pour', avant d'explorer d'autres alternatives pouvant mener vers la clause vide.


Question : Quelle est la signification de Signaler 'échec' dans l'algorithme de résolution descendante ?
Réponse : Signaler 'échec' signifie que l'algorithme de résolution descendante ne peut pas trouver de clause avec un conséquent qui peut être unifié avec le littéral D, donc l'algorithme s'arrête avec échec et ne peut pas trouver la clause vide c-a-d D' =  ( ), ce qui est nécessaire pour prouver la question (le But).


Q: Qu'est-ce qui peut empêcher Prolog de répondre à une question?

A: Prolog peut ne pas répondre à une question si l'exploration en profondeur risque d'emprunter une branche infinie dans une des itérations de la boucle 'Pour', avant d'explorer d'autres alternatives pouvant mener vers la clause vide, ou si les termes ne peuvent pas s'unifier. Par exemple, [X|Y] ne peut pas s'unifier avec le terme [ ], et [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur étant { X←a , Y←b , Z←[c] }.


Question : Qu'est-ce que le signalement 'Succès' dans le contexte de l'algorithme de résolution ?
Réponse : Le signalement 'Succès' est une indication que la clause vide a été trouvée, ce qui signifie que la dénégation initiale a été réfutée et que la conséquence logique a été démontrée. Cela se produit lorsque l'algorithme explore en profondeur l'espace de recherche des résolvantes issues de la dénégation initiale, jusqu'à trouver la clause vide.


Quel est le résultat de l'exécution d'un programme Prolog si la question posée contient des variables anonymes ?

Réponse : Les valeurs des variables anonymes ne seront pas affichées en cas de succès, mais leur unification avec des termes peut être réalisée selon des règles spécifiques. Par exemple, [X|Y] peut s'unifier avec le terme [a,b,c], l'unificateur étant alors { X←a , Y←[b,c] } et [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur étant alors { X←a , Y←b , Z←[c] }.


Question : Quels sont les objets manipulés par Prolog ?
Réponse : Les objets manipulés par Prolog sont : 
– Objets élémentaires (constantes , variables)
– Listes d'objets : [obj1, obj2, … objn]
– Objets structurés : identificateur( obj1, obj2, … objm)
– Prédicats : app(X,L) où X peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←[b,c] } et X ne peut pas s'unifier avec le terme [ ] mais peut s'unifier avec le terme [a], l'unificateur est alors { X←a , Y←[ ] } et [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←b , Z←[c]


Réponse C. app(X,L) :- X | L. Exemple : Définition d'un prédicat 'app(X,L)' qui sera évalué à vrai si X appartient à la liste L et faux sinon. app( X, [X|L] ). /* X appartient à toute liste commençant par X ([X|L]) */ app( X, [Y|L] ) :- app( X, L ). /* si X appartient à la queue d'une liste (L), alors X appartient aussi à la liste */

Question : Quels sont les prédicats qui peuvent être utilisés pour manipuler des objets structurés en Prolog ?
Réponse : Les prédicats qui peuvent être utilisés pour manipuler des objets structurés en Prolog incluent des prédicats pour l'insertion, la concaténation, la comparaison et la manipulation des listes.


Réponse: Les objets manipulés par Prolog sont : des objets élémentaires (constantes, variables), des listes d'objets, des objets structurés et des structures de données telles que les listes liées et les listes à doublement liées. Ces structures peuvent être unifiées avec des termes pour définir des prédicats. Par exemple, [X|Y] peut s'unifier avec le terme [a,b,c], l'unificateur étant { X←a , Y←[b,c] } et [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur étant { X←a , Y←b , Z←[c] }.


Question : Comment fonctionne un démonstrateur automatique de théorèmes utilisé en programmation logique ? 
Réponse : Un démonstrateur automatique de théorèmes utilisé en programmation logique accepte en entrée un ensemble d'énoncés représentant les hypothèses du programme logique et tente de vérifier si à partir de cet ensemble d'énoncés, on peut déduire une formule donnée aussi en entrée (le but ou la question du programme logique). Durant ce processus de démonstration, le moteur d'inférence résoudra , par effet de bord , le problème décrit par le programme logique. Ces énoncés sont sous forme de clauses, avec un alphabet composé des symboles utilisés (constantes, variables, etc.) et des opérateurs logiques (conjonction, disjonction, négation). Les formules bien formées sont l'ensemble des clauses


Réponse: B. La résolution descendante


Question : app(X, [a,b])
Réponse : X = a


Réponse: X = cc, car [X|Y] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←[b,c] }.


Question : Peut-on unifier [X|Y] avec le terme [a,b] ?
Réponse : Non, [X|Y] ne peut pas s'unifier avec le terme [a,b]. Cependant, [X|Y] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←[b,c] }. [X|Y] ne peut pas s'unifier avec le terme [ ] et peut s'unifier avec le terme [a], l'unificateur est alors { X←a , Y←[ ] }. [X,Y|Z] peut s'unifier avec le terme [a,b,c], l'unificateur est alors { X←a , Y←b , Z←[c] }.


Réponse : A. [ ] (ne peut pas s'unifier avec le terme [a,b], [X|Y] ne peut pas s'unifier avec le terme [ ], [X,Y|Z] peut s'unifier avec le terme [a,b,c])

Question : Quel est le terme structuré représentant la liste [1,2,3] ?
Réponse : lst(1,lst(2,lst(3,nil)))

Quelle est la représentation interne d'une liste [1,2,3] ?

Réponse : lst(1,lst(2,lst(3,nil)))
